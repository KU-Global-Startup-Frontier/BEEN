import { NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/client'

interface CategoryScore {
  [key: string]: {
    total: number
    count: number
  }
}

export async function POST(request: Request) {
  try {
    const body = await request.json()
    const { sessionId, userId } = body
    
    if (!sessionId && !userId) {
      return NextResponse.json(
        { error: 'Either sessionId or userId is required' },
        { status: 400 }
      )
    }
    
    const supabase = createClient()
    
    // Fetch user's ratings with activity details
    let ratingsQuery = supabase
      .from('ratings')
      .select(`
        *,
        activities (
          name,
          category,
          description
        )
      `)
    
    if (userId) {
      ratingsQuery = ratingsQuery.eq('user_id', userId)
    } else {
      ratingsQuery = ratingsQuery.eq('session_id', sessionId)
    }
    
    const { data: ratings, error: ratingsError } = await ratingsQuery
    
    if (ratingsError) {
      console.error('Error fetching ratings:', ratingsError)
      return NextResponse.json(
        { error: 'Failed to fetch ratings' },
        { status: 500 }
      )
    }
    
    if (!ratings || ratings.length < 20) {
      return NextResponse.json(
        { error: 'At least 20 ratings are required for analysis' },
        { status: 400 }
      )
    }
    
    // Analyze ratings by category
    const categoryScores: CategoryScore = {}
    const keywords = new Set<string>()
    
    ratings.forEach((rating: any) => {
      if (rating.score >= 0 && rating.activities) {
        const category = rating.activities.category
        
        if (!categoryScores[category]) {
          categoryScores[category] = { total: 0, count: 0 }
        }
        
        categoryScores[category].total += rating.score
        categoryScores[category].count += 1
        
        // Add keywords based on high scores
        if (rating.score >= 4) {
          addKeywordsForCategory(category, keywords)
        }
      }
    })
    
    // Calculate average scores for each category
    const categories = Object.entries(categoryScores).map(([name, data]) => ({
      name,
      score: Math.round((data.total / data.count) * 20) // Convert to 0-100 scale
    })).sort((a, b) => b.score - a.score)
    
    // Determine strengths based on top categories
    const topCategories = categories.slice(0, 3)
    const strengths = generateStrengths(topCategories)
    
    // Generate recommendations
    const recommendations = generateRecommendations(topCategories)
    
    // Prepare analysis result
    const analysisResult = {
      categories,
      keywords: Array.from(keywords).slice(0, 10),
      strengths,
      recommendations,
      chartData: categories,
      ratingCount: ratings.length,
      analyzedAt: new Date().toISOString()
    }
    
    // Save analysis result to database
    const { data: savedResult, error: saveError } = await supabase
      .from('analysis_results')
      .insert({
        user_id: userId || null,
        session_id: sessionId || null,
        summary_json: analysisResult
      })
      .select()
      .single()
    
    if (saveError) {
      console.error('Error saving analysis result:', saveError)
      // Continue even if save fails - we can still return the result
    }
    
    return NextResponse.json({
      id: savedResult?.id || `temp-${crypto.randomUUID()}`,
      insights: analysisResult
    })
  } catch (error) {
    console.error('API error:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}

function addKeywordsForCategory(category: string, keywords: Set<string>) {
  const categoryKeywords: { [key: string]: string[] } = {
    'Ï∞ΩÏûë': ['Ï∞ΩÏùòÏ†Å', 'ÌëúÌòÑÎ†•', 'ÏÉÅÏÉÅÎ†•', 'Í∞êÏàòÏÑ±', 'ÏòàÏà†Ï†Å'],
    'Ïö¥Îèô': ['Ï≤¥Î†•', 'ÎÅàÍ∏∞', 'ÎèÑÏ†ÑÏ†ïÏã†', 'Í±¥Í∞ïÍ¥ÄÎ¶¨', 'ÌôúÎèôÏ†Å'],
    'ÌïôÏäµ': ['ÏßÄÏ†ÅÌò∏Í∏∞Ïã¨', 'Î∂ÑÏÑùÎ†•', 'ÎÖºÎ¶¨Î†•', 'ÌïôÏäµÎä•Î†•', 'ÌÉêÍµ¨Ïã¨'],
    'ÏÇ¨ÌöåÌôúÎèô': ['Î¶¨ÎçîÏã≠', 'Í≥µÍ∞êÎä•Î†•', 'ÏÜåÌÜµÎä•Î†•', 'ÌòëÏóÖ', 'ÏÇ¨ÌöåÏÑ±'],
    'Í∏∞Ïà†': ['Î¨∏Ï†úÌï¥Í≤∞', 'ÎÖºÎ¶¨Î†•', 'ÌòÅÏã†ÏÑ±', 'Í∏∞Ïà†Î†•', 'Ï≤¥Í≥ÑÏ†Å'],
    'ÎπÑÏ¶àÎãàÏä§': ['Í∏∞ÌöçÎ†•', 'Ï†ÑÎûµÏ†ÅÏÇ¨Í≥†', 'Ïã§ÌñâÎ†•', 'ÎπÑÏ¶àÎãàÏä§Í∞êÍ∞Å', 'Î™©ÌëúÏßÄÌñ•'],
    'ÏòàÏà†': ['Ïã¨ÎØ∏Ïïà', 'Í∞êÏÑ±', 'Î¨∏ÌôîÏù¥Ìï¥', 'ÌëúÌòÑÎ†•', 'Ï∞ΩÏûëÏöïÍµ¨'],
    'Ï∑®ÎØ∏': ['Í∑†ÌòïÍ∞êÍ∞Å', 'ÏûêÍ∏∞Í¥ÄÎ¶¨', 'Ïó¨Ïú†', 'Îã§Ïû¨Îã§Îä•', 'Ïó¥Ï†ï']
  }
  
  const keywordsToAdd = categoryKeywords[category] || []
  keywordsToAdd.forEach(keyword => keywords.add(keyword))
}

function generateStrengths(topCategories: Array<{ name: string, score: number }>) {
  const strengthTemplates: { [key: string]: any } = {
    'Ï∞ΩÏûë': {
      title: 'Ï∞ΩÏùòÏ†Å Î¨∏Ï†úÌï¥Í≤∞Ïûê',
      description: 'Î≥µÏû°Ìïú Î¨∏Ï†úÎ•º Ï∞ΩÏùòÏ†ÅÏù∏ Î∞©Î≤ïÏúºÎ°ú Ìï¥Í≤∞ÌïòÎäî Îä•Î†•Ïù¥ Îõ∞Ïñ¥ÎÇ©ÎãàÎã§',
      icon: 'üé®'
    },
    'Í∏∞Ïà†': {
      title: 'Í∏∞Ïà† ÌòÅÏã†Í∞Ä',
      description: 'ÏÉàÎ°úÏö¥ Í∏∞Ïà†ÏùÑ Îπ†Î•¥Í≤å ÏäµÎìùÌïòÍ≥† ÌôúÏö©ÌïòÎäî Ïû¨Îä•Ïù¥ ÏûàÏäµÎãàÎã§',
      icon: 'üí°'
    },
    'ÌïôÏäµ': {
      title: 'ÏßÄÏÜçÏ†Å ÌïôÏäµÏûê',
      description: 'ÎÅäÏûÑÏóÜÏù¥ Î∞∞Ïö∞Í≥† ÏÑ±Ïû•ÌïòÎ†§Îäî Ïó¥Ï†ïÏùÑ Í∞ÄÏßÄÍ≥† ÏûàÏäµÎãàÎã§',
      icon: 'üìö'
    },
    'Ïö¥Îèô': {
      title: 'ÌôúÎèôÏ†Å Ïã§ÌñâÍ∞Ä',
      description: 'Î™©ÌëúÎ•º Ìñ•Ìï¥ Íæ∏Ï§ÄÌûà ÎÖ∏Î†•ÌïòÎäî Ï≤¥Î†•Í≥º Ï†ïÏã†Î†•ÏùÑ Í∞ñÏ∂îÍ≥† ÏûàÏäµÎãàÎã§',
      icon: 'üí™'
    },
    'ÏÇ¨ÌöåÌôúÎèô': {
      title: 'ÏÜåÌÜµÏùò Î¶¨Îçî',
      description: 'ÏÇ¨ÎûåÎì§Í≥º Ìï®Íªò ÏùºÌïòÎ©∞ Í∏çÏ†ïÏ†ÅÏù∏ Î≥ÄÌôîÎ•º ÎßåÎì§Ïñ¥ÎÉÖÎãàÎã§',
      icon: 'ü§ù'
    },
    'ÎπÑÏ¶àÎãàÏä§': {
      title: 'Ï†ÑÎûµÏ†Å Í∏∞ÌöçÏûê',
      description: 'ÎπÑÏ¶àÎãàÏä§ Í∏∞ÌöåÎ•º Ìè¨Ï∞©ÌïòÍ≥† Ïã§ÌñâÌïòÎäî Îä•Î†•Ïù¥ Îõ∞Ïñ¥ÎÇ©ÎãàÎã§',
      icon: 'üìà'
    },
    'ÏòàÏà†': {
      title: 'Í∞êÏÑ± ÌÅêÎ†àÏù¥ÌÑ∞',
      description: 'ÏòàÏà†Ï†Å Í∞êÍ∞ÅÏúºÎ°ú ÏïÑÎ¶ÑÎã§ÏõÄÏùÑ Î∞úÍ≤¨ÌïòÍ≥† ÌëúÌòÑÌï©ÎãàÎã§',
      icon: 'üé≠'
    },
    'Ï∑®ÎØ∏': {
      title: 'ÎùºÏù¥ÌîÑ Î∞∏Îü∞ÏÑú',
      description: 'ÏùºÍ≥º ÏÇ∂Ïùò Í∑†ÌòïÏùÑ Ïûò ÎßûÏ∂îÎ©∞ Îã§ÏñëÌïú Í≤ΩÌóòÏùÑ Ï¶êÍπÅÎãàÎã§',
      icon: 'üåü'
    }
  }
  
  return topCategories.map(cat => 
    strengthTemplates[cat.name] || {
      title: cat.name + ' Ï†ÑÎ¨∏Í∞Ä',
      description: `${cat.name} Î∂ÑÏïºÏóê ÎåÄÌïú ÎÜíÏùÄ Í¥ÄÏã¨Í≥º Ïû¨Îä•ÏùÑ Î≥¥ÏûÖÎãàÎã§`,
      icon: '‚≠ê'
    }
  )
}

function generateRecommendations(topCategories: Array<{ name: string, score: number }>) {
  const recommendations: { [key: string]: string[] } = {
    'Ï∞ΩÏûë': [
      'Í∞úÏù∏ Î∏îÎ°úÍ∑∏ÎÇò Ïú†ÌäúÎ∏å Ï±ÑÎÑê ÏãúÏûëÌïòÍ∏∞',
      'Ï∞ΩÏûë Î™®ÏûÑÏù¥ÎÇò ÎèôÏïÑÎ¶¨ Ï∞∏Ïó¨ÌïòÍ∏∞',
      'Í≥µÎ™®Ï†ÑÏù¥ÎÇò Ï∞ΩÏûë ÎåÄÌöå ÎèÑÏ†ÑÌïòÍ∏∞'
    ],
    'Í∏∞Ïà†': [
      'ÏÉàÎ°úÏö¥ ÌîÑÎ°úÍ∑∏ÎûòÎ∞ç Ïñ∏Ïñ¥ ÌïôÏäµÌïòÍ∏∞',
      'Ïò§ÌîàÏÜåÏä§ ÌîÑÎ°úÏ†ùÌä∏ Ï∞∏Ïó¨ÌïòÍ∏∞',
      'Ìï¥Ïª§ÌÜ§Ïù¥ÎÇò Í∏∞Ïà† Ïª®ÌçºÎü∞Ïä§ Ï∞∏Í∞ÄÌïòÍ∏∞'
    ],
    'ÌïôÏäµ': [
      'Ïò®ÎùºÏù∏ Í∞ïÏùò ÌîåÎû´ÌèºÏóêÏÑú ÏÉàÎ°úÏö¥ Î∂ÑÏïº ÌÉêÏÉâÌïòÍ∏∞',
      'ÎèÖÏÑú Î™®ÏûÑÏù¥ÎÇò Ïä§ÌÑ∞Îîî Í∑∏Î£π Ï∞∏Ïó¨ÌïòÍ∏∞',
      'ÏûêÍ≤©Ï¶ù Ï∑®Îìù Î™©Ìëú ÏÑ∏Ïö∞Í∏∞'
    ],
    'Ïö¥Îèô': [
      'ÏÉàÎ°úÏö¥ Ïä§Ìè¨Ï∏†ÎÇò Ïö¥Îèô ÎèÑÏ†ÑÌïòÍ∏∞',
      'Ïö¥Îèô ÎèôÌò∏ÌöåÎÇò ÌÅ¥ÎüΩ Í∞ÄÏûÖÌïòÍ∏∞',
      'Í∞úÏù∏ Ïö¥Îèô Î™©Ìëú ÏÑ§Ï†ïÌïòÍ≥† Í∏∞Î°ùÌïòÍ∏∞'
    ],
    'ÏÇ¨ÌöåÌôúÎèô': [
      'Î¥âÏÇ¨ÌôúÎèôÏù¥ÎÇò ÏÇ¨ÌöåÍ≥µÌóå ÌîÑÎ°úÍ∑∏Îû® Ï∞∏Ïó¨ÌïòÍ∏∞',
      'ÎÑ§Ìä∏ÏõåÌÇπ Ïù¥Î≤§Ìä∏ÎÇò Î™®ÏûÑ Ï∞∏ÏÑùÌïòÍ∏∞',
      'Î©òÌÜ†ÎßÅ ÌîÑÎ°úÍ∑∏Îû® Ï∞∏Ïó¨ÌïòÍ∏∞'
    ],
    'ÎπÑÏ¶àÎãàÏä§': [
      'ÏÇ¨Ïù¥Îìú ÌîÑÎ°úÏ†ùÌä∏ÎÇò Ï∞ΩÏóÖ ÏïÑÏù¥ÎîîÏñ¥ Íµ¨Ï≤¥ÌôîÌïòÍ∏∞',
      'ÎπÑÏ¶àÎãàÏä§ Í¥ÄÎ†® ÎèÑÏÑúÎÇò Í∞ïÏùò ÏàòÍ∞ïÌïòÍ∏∞',
      'Ï∞ΩÏóÖ Í≤ΩÏßÑÎåÄÌöåÎÇò Í≥µÎ™®Ï†Ñ Ï∞∏Í∞ÄÌïòÍ∏∞'
    ],
    'ÏòàÏà†': [
      'Ï†ÑÏãúÌöåÎÇò Í≥µÏó∞ Ï†ïÍ∏∞Ï†ÅÏúºÎ°ú Í¥ÄÎûåÌïòÍ∏∞',
      'ÏòàÏà† Ï∞ΩÏûë ÌôúÎèô ÏãúÏûëÌïòÍ∏∞',
      'Î¨∏ÌôîÏòàÏà† ÎèôÏïÑÎ¶¨ÎÇò Î™®ÏûÑ Ï∞∏Ïó¨ÌïòÍ∏∞'
    ],
    'Ï∑®ÎØ∏': [
      'ÏÉàÎ°úÏö¥ Ï∑®ÎØ∏ ÌôúÎèô ÏãúÎèÑÌïòÍ∏∞',
      'Ï∑®ÎØ∏ Í¥ÄÎ†® Ïª§ÎÆ§ÎãàÌã∞ Ï∞∏Ïó¨ÌïòÍ∏∞',
      'Ï∑®ÎØ∏Î•º ÌÜµÌïú Î∂ÄÏóÖ Í∞ÄÎä•ÏÑ± ÌÉêÏÉâÌïòÍ∏∞'
    ]
  }
  
  const allRecommendations: string[] = []
  topCategories.forEach(cat => {
    const catRecommendations = recommendations[cat.name] || []
    allRecommendations.push(...catRecommendations)
  })
  
  return allRecommendations.slice(0, 5)
}